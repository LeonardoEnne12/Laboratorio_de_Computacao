// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/29/2021 14:52:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Mem_dados
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mem_dados_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] data;
reg [31:0] read_addr;
reg read_clock;
reg we;
reg [31:0] write_addr;
reg write_clock;
// wires                                               
wire [31:0] q;

// assign statements (if any)                          
Mem_dados i1 (
// port map - connection between master ports and signals/registers   
	.data(data),
	.q(q),
	.read_addr(read_addr),
	.read_clock(read_clock),
	.we(we),
	.write_addr(write_addr),
	.write_clock(write_clock)
);
initial 
begin 
#1000000 $finish;
end 
// data[ 31 ]
initial
begin
	data[31] = 1'b0;
end 
// data[ 30 ]
initial
begin
	data[30] = 1'b0;
end 
// data[ 29 ]
initial
begin
	data[29] = 1'b0;
end 
// data[ 28 ]
initial
begin
	data[28] = 1'b0;
end 
// data[ 27 ]
initial
begin
	data[27] = 1'b0;
end 
// data[ 26 ]
initial
begin
	data[26] = 1'b0;
end 
// data[ 25 ]
initial
begin
	data[25] = 1'b0;
end 
// data[ 24 ]
initial
begin
	data[24] = 1'b0;
end 
// data[ 23 ]
initial
begin
	data[23] = 1'b0;
end 
// data[ 22 ]
initial
begin
	data[22] = 1'b0;
end 
// data[ 21 ]
initial
begin
	data[21] = 1'b0;
end 
// data[ 20 ]
initial
begin
	data[20] = 1'b0;
end 
// data[ 19 ]
initial
begin
	data[19] = 1'b0;
end 
// data[ 18 ]
initial
begin
	data[18] = 1'b0;
end 
// data[ 17 ]
initial
begin
	data[17] = 1'b0;
end 
// data[ 16 ]
initial
begin
	data[16] = 1'b0;
end 
// data[ 15 ]
initial
begin
	data[15] = 1'b0;
end 
// data[ 14 ]
initial
begin
	data[14] = 1'b0;
end 
// data[ 13 ]
initial
begin
	data[13] = 1'b0;
end 
// data[ 12 ]
initial
begin
	data[12] = 1'b0;
end 
// data[ 11 ]
initial
begin
	data[11] = 1'b0;
end 
// data[ 10 ]
initial
begin
	data[10] = 1'b0;
end 
// data[ 9 ]
initial
begin
	data[9] = 1'b0;
end 
// data[ 8 ]
initial
begin
	data[8] = 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #640000 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #320000 1'b1;
	data[0] = #320000 1'b0;
	data[0] = #320000 1'b1;
end 
// read_addr[ 31 ]
initial
begin
	read_addr[31] = 1'b0;
end 
// read_addr[ 30 ]
initial
begin
	read_addr[30] = 1'b0;
end 
// read_addr[ 29 ]
initial
begin
	read_addr[29] = 1'b0;
end 
// read_addr[ 28 ]
initial
begin
	read_addr[28] = 1'b0;
end 
// read_addr[ 27 ]
initial
begin
	read_addr[27] = 1'b0;
end 
// read_addr[ 26 ]
initial
begin
	read_addr[26] = 1'b0;
end 
// read_addr[ 25 ]
initial
begin
	read_addr[25] = 1'b0;
end 
// read_addr[ 24 ]
initial
begin
	read_addr[24] = 1'b0;
end 
// read_addr[ 23 ]
initial
begin
	read_addr[23] = 1'b0;
end 
// read_addr[ 22 ]
initial
begin
	read_addr[22] = 1'b0;
end 
// read_addr[ 21 ]
initial
begin
	read_addr[21] = 1'b0;
end 
// read_addr[ 20 ]
initial
begin
	read_addr[20] = 1'b0;
end 
// read_addr[ 19 ]
initial
begin
	read_addr[19] = 1'b0;
end 
// read_addr[ 18 ]
initial
begin
	read_addr[18] = 1'b0;
end 
// read_addr[ 17 ]
initial
begin
	read_addr[17] = 1'b0;
end 
// read_addr[ 16 ]
initial
begin
	read_addr[16] = 1'b0;
end 
// read_addr[ 15 ]
initial
begin
	read_addr[15] = 1'b0;
end 
// read_addr[ 14 ]
initial
begin
	read_addr[14] = 1'b0;
end 
// read_addr[ 13 ]
initial
begin
	read_addr[13] = 1'b0;
end 
// read_addr[ 12 ]
initial
begin
	read_addr[12] = 1'b0;
end 
// read_addr[ 11 ]
initial
begin
	read_addr[11] = 1'b0;
end 
// read_addr[ 10 ]
initial
begin
	read_addr[10] = 1'b0;
end 
// read_addr[ 9 ]
initial
begin
	read_addr[9] = 1'b0;
end 
// read_addr[ 8 ]
initial
begin
	read_addr[8] = 1'b0;
end 
// read_addr[ 7 ]
initial
begin
	read_addr[7] = 1'b0;
end 
// read_addr[ 6 ]
initial
begin
	read_addr[6] = 1'b0;
end 
// read_addr[ 5 ]
initial
begin
	read_addr[5] = 1'b0;
end 
// read_addr[ 4 ]
initial
begin
	read_addr[4] = 1'b0;
end 
// read_addr[ 3 ]
initial
begin
	read_addr[3] = 1'b0;
end 
// read_addr[ 2 ]
initial
begin
	read_addr[2] = 1'b0;
end 
// read_addr[ 1 ]
initial
begin
	read_addr[1] = 1'b0;
	read_addr[1] = #640000 1'b1;
end 
// read_addr[ 0 ]
initial
begin
	read_addr[0] = 1'b0;
	read_addr[0] = #320000 1'b1;
	read_addr[0] = #320000 1'b0;
	read_addr[0] = #320000 1'b1;
end 

// we
initial
begin
	we = 1'b1;
end 
// write_addr[ 31 ]
initial
begin
	write_addr[31] = 1'b0;
end 
// write_addr[ 30 ]
initial
begin
	write_addr[30] = 1'b0;
end 
// write_addr[ 29 ]
initial
begin
	write_addr[29] = 1'b0;
end 
// write_addr[ 28 ]
initial
begin
	write_addr[28] = 1'b0;
end 
// write_addr[ 27 ]
initial
begin
	write_addr[27] = 1'b0;
end 
// write_addr[ 26 ]
initial
begin
	write_addr[26] = 1'b0;
end 
// write_addr[ 25 ]
initial
begin
	write_addr[25] = 1'b0;
end 
// write_addr[ 24 ]
initial
begin
	write_addr[24] = 1'b0;
end 
// write_addr[ 23 ]
initial
begin
	write_addr[23] = 1'b0;
end 
// write_addr[ 22 ]
initial
begin
	write_addr[22] = 1'b0;
end 
// write_addr[ 21 ]
initial
begin
	write_addr[21] = 1'b0;
end 
// write_addr[ 20 ]
initial
begin
	write_addr[20] = 1'b0;
end 
// write_addr[ 19 ]
initial
begin
	write_addr[19] = 1'b0;
end 
// write_addr[ 18 ]
initial
begin
	write_addr[18] = 1'b0;
end 
// write_addr[ 17 ]
initial
begin
	write_addr[17] = 1'b0;
end 
// write_addr[ 16 ]
initial
begin
	write_addr[16] = 1'b0;
end 
// write_addr[ 15 ]
initial
begin
	write_addr[15] = 1'b0;
end 
// write_addr[ 14 ]
initial
begin
	write_addr[14] = 1'b0;
end 
// write_addr[ 13 ]
initial
begin
	write_addr[13] = 1'b0;
end 
// write_addr[ 12 ]
initial
begin
	write_addr[12] = 1'b0;
end 
// write_addr[ 11 ]
initial
begin
	write_addr[11] = 1'b0;
end 
// write_addr[ 10 ]
initial
begin
	write_addr[10] = 1'b0;
end 
// write_addr[ 9 ]
initial
begin
	write_addr[9] = 1'b0;
end 
// write_addr[ 8 ]
initial
begin
	write_addr[8] = 1'b0;
end 
// write_addr[ 7 ]
initial
begin
	write_addr[7] = 1'b0;
end 
// write_addr[ 6 ]
initial
begin
	write_addr[6] = 1'b0;
end 
// write_addr[ 5 ]
initial
begin
	write_addr[5] = 1'b0;
end 
// write_addr[ 4 ]
initial
begin
	write_addr[4] = 1'b0;
end 
// write_addr[ 3 ]
initial
begin
	write_addr[3] = 1'b0;
end 
// write_addr[ 2 ]
initial
begin
	write_addr[2] = 1'b0;
end 
// write_addr[ 1 ]
initial
begin
	write_addr[1] = 1'b0;
	write_addr[1] = #640000 1'b1;
end 
// write_addr[ 0 ]
initial
begin
	write_addr[0] = 1'b0;
	write_addr[0] = #320000 1'b1;
	write_addr[0] = #320000 1'b0;
	write_addr[0] = #320000 1'b1;
end 

// read_clock
always
begin
	read_clock = 1'b0;
	read_clock = #20000 1'b1;
	#20000;
end 

// write_clock
always
begin
	write_clock = 1'b0;
	write_clock = #20000 1'b1;
	#20000;
end 
endmodule

