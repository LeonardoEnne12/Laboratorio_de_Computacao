// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/29/2021 11:06:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Program_counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Program_counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] addrin;
reg clk;
reg inta;
reg reset;
// wires                                               
wire [31:0] addrBckp;
wire [31:0] addrout;

// assign statements (if any)                          
Program_counter i1 (
// port map - connection between master ports and signals/registers   
	.addrBckp(addrBckp),
	.addrin(addrin),
	.addrout(addrout),
	.clk(clk),
	.inta(inta),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// inta
initial
begin
	inta = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// addrin[ 31 ]
initial
begin
	addrin[31] = 1'b0;
end 
// addrin[ 30 ]
initial
begin
	addrin[30] = 1'b0;
end 
// addrin[ 29 ]
initial
begin
	addrin[29] = 1'b0;
end 
// addrin[ 28 ]
initial
begin
	addrin[28] = 1'b0;
end 
// addrin[ 27 ]
initial
begin
	addrin[27] = 1'b0;
end 
// addrin[ 26 ]
initial
begin
	addrin[26] = 1'b0;
end 
// addrin[ 25 ]
initial
begin
	addrin[25] = 1'b0;
end 
// addrin[ 24 ]
initial
begin
	addrin[24] = 1'b0;
end 
// addrin[ 23 ]
initial
begin
	addrin[23] = 1'b0;
end 
// addrin[ 22 ]
initial
begin
	addrin[22] = 1'b0;
end 
// addrin[ 21 ]
initial
begin
	addrin[21] = 1'b0;
end 
// addrin[ 20 ]
initial
begin
	addrin[20] = 1'b0;
end 
// addrin[ 19 ]
initial
begin
	addrin[19] = 1'b0;
end 
// addrin[ 18 ]
initial
begin
	addrin[18] = 1'b0;
end 
// addrin[ 17 ]
initial
begin
	addrin[17] = 1'b0;
end 
// addrin[ 16 ]
initial
begin
	addrin[16] = 1'b0;
end 
// addrin[ 15 ]
initial
begin
	addrin[15] = 1'b0;
end 
// addrin[ 14 ]
initial
begin
	addrin[14] = 1'b0;
end 
// addrin[ 13 ]
initial
begin
	addrin[13] = 1'b0;
end 
// addrin[ 12 ]
initial
begin
	addrin[12] = 1'b0;
end 
// addrin[ 11 ]
initial
begin
	addrin[11] = 1'b0;
end 
// addrin[ 10 ]
initial
begin
	addrin[10] = 1'b0;
end 
// addrin[ 9 ]
initial
begin
	addrin[9] = 1'b0;
end 
// addrin[ 8 ]
initial
begin
	addrin[8] = 1'b0;
end 
// addrin[ 7 ]
initial
begin
	addrin[7] = 1'b0;
end 
// addrin[ 6 ]
initial
begin
	addrin[6] = 1'b0;
end 
// addrin[ 5 ]
initial
begin
	addrin[5] = 1'b0;
end 
// addrin[ 4 ]
initial
begin
	addrin[4] = 1'b0;
end 
// addrin[ 3 ]
initial
begin
	addrin[3] = 1'b0;
end 
// addrin[ 2 ]
initial
begin
	addrin[2] = 1'b0;
	addrin[2] = #640000 1'b1;
end 
// addrin[ 1 ]
initial
begin
	addrin[1] = 1'b0;
	addrin[1] = #320000 1'b1;
	addrin[1] = #320000 1'b0;
	addrin[1] = #320000 1'b1;
end 
// addrin[ 0 ]
initial
begin
	repeat(3)
	begin
		addrin[0] = 1'b0;
		addrin[0] = #160000 1'b1;
		# 160000;
	end
	addrin[0] = 1'b0;
end 
endmodule

